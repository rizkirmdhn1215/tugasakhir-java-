# Railway Database Configuration
spring.datasource.url=${DATABASE_URL}
spring.datasource.username=${DATABASE_USERNAME}
spring.datasource.password=${DATABASE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# Database connection pool settings
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.idle-timeout=300000

# Railway RabbitMQ Configuration (make it optional)
spring.rabbitmq.host=${RABBITMQ_HOST:localhost}
spring.rabbitmq.port=${RABBITMQ_PORT:5672}
spring.rabbitmq.username=${RABBITMQ_USERNAME:guest}
spring.rabbitmq.password=${RABBITMQ_PASSWORD:guest}

# Railway Port Configuration
server.port=${PORT:8080}

# Production JPA settings - use 'create' for first deployment
spring.jpa.hibernate.ddl-auto=${DDL_AUTO:create}
spring.jpa.show-sql=false

# Production logging
logging.level.org.springframework.security=WARN
logging.level.com.sttp.skripsi=INFO
logging.level.org.springframework.amqp=WARN
logging.level.org.springframework.web=INFO
logging.level.org.hibernate.SQL=WARN

# CORS for Railway domain
app.cors.allowed-origins=${CORS_ORIGINS:*}

# Health check configuration
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=when-authorized
management.health.defaults.enabled=true

## The application itself isn't starting properly

Since Railway is now checking `/actuator/health` (correct path) but still getting "service unavailable", this means your Spring Boot application isn't starting up successfully.

## Common Causes & Solutions

### 1. Missing Environment Variables

Your `application-railway.properties` expects these environment variables. Make sure they're set in Railway:

**Required Environment Variables:**
- `DATABASE_URL` (Railway PostgreSQL connection string)
- `DATABASE_USERNAME` 
- `DATABASE_PASSWORD`
- `RABBITMQ_HOST`
- `RABBITMQ_PORT` (default: 5672)
- `RABBITMQ_USERNAME`
- `RABBITMQ_PASSWORD`
- `PORT` (Railway sets this automatically)

### 2. Database Connection Issues

Update your `application-railway.properties` to be more resilient:
```
# Railway Database Configuration
spring.datasource.url=${DATABASE_URL}
spring.datasource.username=${DATABASE_USERNAME}
spring.datasource.password=${DATABASE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# Database connection pool settings
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.idle-timeout=300000

# Railway RabbitMQ Configuration (make it optional)
spring.rabbitmq.host=${RABBITMQ_HOST:localhost}
spring.rabbitmq.port=${RABBITMQ_PORT:5672}
spring.rabbitmq.username=${RABBITMQ_USERNAME:guest}
spring.rabbitmq.password=${RABBITMQ_PASSWORD:guest}

# Railway Port Configuration
server.port=${PORT:8080}

# Production JPA settings - use 'create' for first deployment
spring.jpa.hibernate.ddl-auto=${DDL_AUTO:create}
spring.jpa.show-sql=false

# Production logging
logging.level.org.springframework.security=WARN
logging.level.com.sttp.skripsi=INFO
logging.level.org.springframework.amqp=WARN
logging.level.org.springframework.web=INFO
logging.level.org.hibernate.SQL=WARN

# CORS for Railway domain
app.cors.allowed-origins=${CORS_ORIGINS:*}

# Health check configuration
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=when-authorized
management.health.defaults.enabled=true
```